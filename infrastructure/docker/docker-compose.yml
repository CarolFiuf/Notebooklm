name: notebooklm
version: '3.9'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: notebooklm-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-notebooklm}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../../config/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - notebooklm-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-notebooklm}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:v1.7.4
    container_name: notebooklm-qdrant
    restart: unless-stopped
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
      QDRANT__LOG_LEVEL: ${QDRANT_LOG_LEVEL:-INFO}
    ports:
      - "${QDRANT_PORT:-6333}:6333"    # HTTP API
      - "${QDRANT_GRPC_PORT:-6334}:6334"    # gRPC API
    volumes:
      - qdrant_data:/qdrant/storage
      - ./qdrant.yaml:/qdrant/config/production.yaml:ro
    networks:
      - notebooklm-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:6333/readyz || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    command: ./qdrant --config-path /qdrant/config/production.yaml
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis for Caching
  redis:
    image: redis:7-alpine
    container_name: notebooklm-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - notebooklm-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # Adminer for Database Management
  adminer:
    image: adminer:4.8.1
    container_name: notebooklm-adminer
    restart: unless-stopped
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: pepa-linha
    ports:
      - "${ADMINER_PORT:-8080}:8080"
    networks:
      - notebooklm-network
    depends_on:
      postgres:
        condition: service_healthy
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # Nginx Reverse Proxy (Optional for production)
  nginx:
    image: nginx:alpine
    container_name: notebooklm-nginx
    restart: unless-stopped
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx_logs:/var/log/nginx
    networks:
      - notebooklm-network
    depends_on:
      - notebooklm-app
    profiles:
      - production
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Main Application
  notebooklm-app:
    build:
      context: ../..
      dockerfile: infrastructure/docker/Dockerfile
      args:
        - PYTHON_VERSION=3.9
    container_name: notebooklm-app
    restart: unless-stopped
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DEBUG=${DEBUG:-true}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-notebooklm}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MODELS_DIR=/app/data/models
    ports:
      - "${STREAMLIT_PORT:-8501}:8501"
    volumes:
      - app_data:/app/data
      - app_logs:/app/logs
      - ./models:/app/data/models
      - ../../src:/app/src:ro  # Development mode
      - ../../config:/app/config:ro  # Development mode
    networks:
      - notebooklm-network
    depends_on:
      postgres:
        condition: service_healthy
      # qdrant:
      #   condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 100s
      retries: 3
      start_period: 60s
    # profiles:
    #   - production
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "5"

# Volumes
volumes:
  postgres_data:
    driver: local
    name: notebooklm_postgres_data
  qdrant_data:
    driver: local
    name: notebooklm_qdrant_data
  redis_data:
    driver: local
    name: notebooklm_redis_data
  app_data:
    driver: local
    name: notebooklm_app_data
  app_logs:
    driver: local
    name: notebooklm_app_logs
  # app_models:
  #   driver: local
  #   name: notebooklm_app_models
  nginx_logs:
    driver: local
    name: notebooklm_nginx_logs

# Networks
networks:
  notebooklm-network:
    driver: bridge
    name: notebooklm_network
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1